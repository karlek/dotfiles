lua << EOF 
	require'lspconfig'.tsserver.setup{}
	require'lspconfig'.gopls.setup{}
	-- require'lspconfig'.pyright.setup{}
EOF 
" lua <<EOF
"   -- …

"   function goimports(timeoutms)
"     local context = { source = { organizeImports = true } }
"     vim.validate { context = { context, "t", true } }

"     local params = vim.lsp.util.make_range_params()
"     params.context = context

"     local method = "textDocument/codeAction"
"     local resp = vim.lsp.buf_request_sync(0, method, params, timeoutms)
"     if resp and resp[1] then
"       local result = resp[1].result
"       if result and result[1] then
"         local edit = result[1].edit
"         vim.lsp.util.apply_workspace_edit(edit)
"       end
"     end

"     vim.lsp.buf.formatting()
"   end
" EOF

" autocmd FileType go setlocal omnifunc=v:lua.vim.lsp.omnifunc
" autocmd BufWritePre *.go lua goimports(1000)

" set omnifunc=v:lua.vim.lsp.omnifunc

" hi LspReferenceText gui=bold guibg=#444444
" hi LspReferenceRead gui=bold guibg=#448844
" hi LspReferenceWrite gui=bold guibg=#884444
"  " #d7005f

" nnoremap <silent> gd    <cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap <silent> gH    <cmd>lua vim.lsp.buf.clear_references()<CR><cmd>lua vim.lsp.buf.document_highlight()<CR>

" nnoremap <silent> gh    <cmd>lua vim.lsp.buf.hover()<CR>
" nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
" nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
" nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>

" nnoremap <leader>dn <cmd>lua vim.lsp.diagnostic.goto_next()<CR>

" function! ToggleQuickFix()
" 	if empty(filter(getwininfo(), 'v:val.quickfix'))
" 		copen
" 	else
" 		cclose
" 	endif
" endfunction

" nnoremap <silent> <leader>q :call ToggleQuickFix()<cr>

" incoming_calls()                                *vim.lsp.buf.incoming_calls()*
" implementation()                                *vim.lsp.buf.implementation()*
" outgoing_calls()                                *vim.lsp.buf.outgoing_calls()*
" rename({new_name})                                      *vim.lsp.buf.rename()*
" signature_help()                                *vim.lsp.buf.signature_help()*
" type_definition()                              *vim.lsp.buf.type_definition()*
" goto_next({opts})                             *vim.lsp.diagnostic.goto_next()*
" goto_prev({opts})                             *vim.lsp.diagnostic.goto_prev()*

" Makes s (along with corresponding maps for ss and S) act like d, except it
" doesn’t save the cut text to a register. Helps when I want to delete
" something without clobbering my unnamed register.
" nnoremap s "_d

" autocmd CursorHold  <buffer> lua vim.lsp.buf.document_highlight()
" autocmd CursorHoldI <buffer> lua vim.lsp.buf.document_highlight()
" autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
" autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_sync()

